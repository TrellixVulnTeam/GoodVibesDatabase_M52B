{
  "version": 3,
  "sources": ["../../twitch-stream-embed/src/twitch-stream.js"],
  "sourcesContent": ["export class TwitchStream extends HTMLElement {\n    static TWITCH_EMBED_URL = 'https://embed.twitch.tv/embed/v1.js';\n    static get attributes() {\n        return {\n            channel: {},\n            width: { default: 940 },\n            height: { default: 480 },\n            theme: { default: 'dark' },\n            muted: { default: false },\n            autoplay: { default: true },\n            chat: { default: false },\n            allowfullscreen: { default: true },\n            parent: { default: '' },\n        };\n    }\n\n    constructor() {\n        super();\n        this.initialized = false;\n        this.attachShadow({ mode: 'open' });\n    }\n\n    connectedCallback() {\n        this.setDefaults();\n        this.initializeTwitchEmbed();\n        this.render();\n    }\n\n    getPlayer() {\n        return this.embed ? this.embed.getPlayer() : null;\n    }\n\n    play() {\n        this.embed.play();\n    }\n\n    pause() {\n        this.embed.pause();\n    }\n\n    getChannel() {\n        return this.embed.getChannel();\n    }\n\n    setChannel(channel) {\n        this.setAttribute('channel', channel);\n        this.embed.setChannel(channel);\n    }\n\n    getQualities() {\n        return this.embed.getQualities();\n    }\n\n    setQuality(quality) {\n        const qualities = this.embed.getQualities().map(q => q.name);\n        if (!qualities.includes(quality)) {\n            throw Error(`Quality is not valid. Valid qualities are ${qualities.join(', ')}`);\n        }\n        this.embed.setQuality(quality);\n    }\n\n    getMuted() {\n        return this.embed.getMuted();\n    }\n\n    setMuted(muted) {\n        if (muted) {\n            this.setAttribute('muted', '');\n        } else {\n            this.removeAttribute('muted', '');\n        }\n        this.embed.setMuted(muted);\n    }\n\n    getVolume() {\n        return this.embed.getVolume();\n    }\n\n    setVolume(volume) {\n        this.embed.setVolume(volume);\n    }\n\n    async initializeTwitchEmbed() {\n        if (!window.Twitch) {\n            await this.importTwitch();\n        }\n        await this.newFrame();\n        let embedElem = this.shadowRoot.querySelector('#twitch-embed');\n        const embed = new Twitch.Embed(embedElem, {\n            width: this.width,\n            height: this.height,\n            channel: this.channel,\n            theme: this.theme,\n            muted: this.muted,\n            autoplay: this.autoplay,\n            layout: this.chat ? 'video-with-chat' : 'video',\n            allowfullscreen: this.allowfullscreen,\n            parent: this.parent,\n        });\n        this.embed = embed;\n\n        this._setEmbedListeners();\n        this.initialized = true;\n    }\n\n    _setEmbedListeners() {\n        this.embed.addEventListener(Twitch.Embed.VIDEO_READY, () => {\n            this.dispatchEvent(new CustomEvent('twitch-stream.video.ready', { detail: { embed: this.embed } }));\n        });\n        this.embed.addEventListener(Twitch.Embed.VIDEO_PLAY, sessionId => {\n            this.dispatchEvent(\n                new CustomEvent('twitch-stream.video.play', { detail: { embed: this.embed, sessionId } }),\n            );\n        });\n        // Set all the callback events in a loop since we are just exposing them and no extra\n        // functionality is required\n        const events = ['ENDED', 'PAUSE', 'PLAY', 'PLAYBACK_BLOCKED', 'PLAYING', 'OFFLINE', 'ONLINE', 'READY'];\n        events.forEach(ev => {\n            this.embed.addEventListener(Twitch.Player[ev], async () => {\n                await this._handlePlayingState(ev);\n                this.dispatchEvent(\n                    new CustomEvent(`twitch-stream.${ev.toLowerCase()}`, { detail: { embed: this.embed } }),\n                );\n            });\n        });\n    }\n\n    async _handlePlayingState() {\n        await this.wait(50);\n        const isPaused = this.embed.isPaused();\n        if (isPaused) {\n            this.setAttribute('paused', '');\n            this.removeAttribute('playing');\n        } else {\n            this.setAttribute('playing', '');\n            this.removeAttribute('paused');\n        }\n    }\n\n    wait(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    newFrame() {\n        return new Promise(resolve => window.requestAnimationFrame(resolve));\n    }\n\n    _handleAttributeChange(attributeName) {\n        switch (attributeName) {\n            case 'channel':\n                this.setChannel(this.channel);\n                break;\n        }\n    }\n\n    importTwitch() {\n        return new Promise((resolve, reject) => {\n            const script = document.createElement('script');\n            script.src = TwitchStream.TWITCH_EMBED_URL;\n            document.head.appendChild(script);\n\n            script.onload = resolve;\n            script.onerror = reject;\n        });\n    }\n\n    render() {\n        const content = TwitchStream.template.content.cloneNode(true);\n        this.shadowRoot.innerHTML = '';\n        this.shadowRoot.appendChild(content);\n    }\n\n    static get template() {\n        const template = document.createElement('template');\n        template.innerHTML = `<div id=\"twitch-embed\" style=\"height: 100%\"></div>`;\n        return template;\n    }\n\n    setDefaults() {\n        const attributes = TwitchStream.attributes;\n        Object.keys(attributes).forEach(attr => {\n            if (!this[attr]) {\n                this[attr] = attributes[attr].default;\n            }\n        });\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (oldValue === newValue) return;\n\n        this[name] = newValue === '' ? true : newValue;\n        if (this.initialized) {\n            this._handleAttributeChange(name);\n        }\n    }\n\n    static get observedAttributes() {\n        const attributes = TwitchStream.attributes;\n        return Object.keys(attributes).filter(attr => {\n            return typeof attributes[attr].watch === 'undefined' || attributes[attr].watch;\n        });\n    }\n}\n\nif (!customElements.get('twitch-stream')) {\n    customElements.define('twitch-stream', TwitchStream);\n}\n"],
  "mappings": "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",
  "names": []
}
